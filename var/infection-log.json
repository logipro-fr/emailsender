{"stats":{"totalMutantsCount":60,"killedCount":42,"notCoveredCount":14,"escapedCount":4,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":70,"mutationCodeCoverage":76.67,"coveredCodeMsi":91.3},"escaped":[{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        \n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             throw new \\InvalidArgumentException(\"Request cannot be null\");\n         }\n         $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n-        $this->emailApi->sendEmail($mail);\n+        \n         $this->respository->add($mail);\n         $this->response = new ResponseSendMail($mail->getMailId());\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7707365a3d1a4a8eb0e92aea8b967854.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.012, Memory: 10.00 MB\n\nOK (3 tests, 11 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        \n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     private function buildContact(string $sentence, string $separator): Contact\n     {\n-        $this->verifySeparator($separator);\n+        \n         $tab = explode($separator, $sentence);\n         return new Contact($tab[0], $tab[1]);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.116509f85adabb6a70630efe8dcca1f7.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.012, Memory: 10.00 MB\n\nOK (3 tests, 11 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        \n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     private function buildRecipient(array $recipients, string $separator): Recipient\n     {\n-        $this->verifySeparator($separator);\n+        \n         \/** @var array<Int, Contact> *\/\n         $result = array();\n         for ($i = 0; $i < count($recipients); $i++) {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.439133187367bd1da210adec75931236.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.016, Memory: 10.00 MB\n\nOK (3 tests, 11 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            \n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n         for ($i = 0; $i < count($recipients); $i++) {\n-            $this->verifySeparator($separator);\n+            \n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }\n         return new Recipient($result);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.72bfa4712281250e0f6779f308a4d26c.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.012, Memory: 10.00 MB\n\nOK (3 tests, 11 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    protected function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n     {\n     }\n-    public function execute(RequestEmailSender $request): void\n+    protected function execute(RequestEmailSender $request): void\n     {\n         if ($request == null) {\n             throw new \\InvalidArgumentException(\"Request cannot be null\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e172234b2d0030ecfbcdd24a947127b3.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::execute() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\nERRORS!\nTests: 3, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"AssignmentEqual","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request = null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function execute(RequestEmailSender $request): void\n     {\n-        if ($request == null) {\n+        if ($request = null) {\n             throw new \\InvalidArgumentException(\"Request cannot be null\");\n         }\n         $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6140e07df128b4b049866215645e3fe5.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildMailFromRequest(): Argument #1 ($request) must be of type EmailSender\\Application\\Service\\SendMail\\RequestEmailSender, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php on line 20\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:18\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:20\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\nERRORS!\nTests: 3, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"Equal","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request != null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function execute(RequestEmailSender $request): void\n     {\n-        if ($request == null) {\n+        if ($request != null) {\n             throw new \\InvalidArgumentException(\"Request cannot be null\");\n         }\n         $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d71f7afdac55f1c3fbb739b40af505a1.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nInvalidArgumentException: Request cannot be null\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:18\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\nERRORS!\nTests: 3, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        \n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n         $this->emailApi->sendEmail($mail);\n-        $this->respository->add($mail);\n+        \n         $this->response = new ResponseSendMail($mail->getMailId());\n     }\n     public function getResponse(): ResponseSendMail","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d0642dc113f6e78e54f7546d89aa509c.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Infrastructure\\Persistance\\EmailSenderRepositoryInMemory::findById(): Return value must be of type EmailSender\\Domain\\Mail, null returned\n\n\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Persistance\/EmailSenderRepositoryInMemory.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:52\n\nERRORS!\nTests: 3, Assertions: 10, Errors: 1, Warnings: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    protected function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n         $this->respository->add($mail);\n         $this->response = new ResponseSendMail($mail->getMailId());\n     }\n-    public function getResponse(): ResponseSendMail\n+    protected function getResponse(): ResponseSendMail\n     {\n         return $this->response;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4cff6350dd2b8e5a650b06f9ba5c134a.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::getResponse() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:46\n\nERRORS!\nTests: 3, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    protected function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n use Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\n class MailFactory\n {\n-    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n+    protected function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n     {\n         return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b172a48205a4d623617c9ced64c15c70.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.013, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\MailFactory::buildMailFromRequest() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\MailFactory::buildMailFromRequest() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\MailFactory::buildMailFromRequest() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[1], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->verifySeparator($separator);\n         $tab = explode($separator, $sentence);\n-        return new Contact($tab[0], $tab[1]);\n+        return new Contact($tab[1], $tab[1]);\n     }\n     \/**\n      * @param array<string> $recipients","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7151809221200b33447e5ad2915d6ad7.infection.xml\n\n..F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'Pedro'\n+'pedro@gmail.com'\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:60\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[0]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->verifySeparator($separator);\n         $tab = explode($separator, $sentence);\n-        return new Contact($tab[0], $tab[1]);\n+        return new Contact($tab[0], $tab[0]);\n     }\n     \/**\n      * @param array<string> $recipients","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.333a6f5acb18b6d05bbedd6067e779f3.infection.xml\n\n..E                                                                 3 \/ 3 (100%)\n\nTime: 00:00.015, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: Pedro\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:40\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:61\n\nERRORS!\nTests: 3, Assertions: 6, Errors: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[2]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->verifySeparator($separator);\n         $tab = explode($separator, $sentence);\n-        return new Contact($tab[0], $tab[1]);\n+        return new Contact($tab[0], $tab[2]);\n     }\n     \/**\n      * @param array<string> $recipients","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.eaada13eb50916b968e8f85261f17355.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.013, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Domain\\Contact::__construct(): Argument #2 ($address) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 28\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:28\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nTypeError: EmailSender\\Domain\\Contact::__construct(): Argument #2 ($address) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 28\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:28\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nTypeError: EmailSender\\Domain\\Contact::__construct(): Argument #2 ($address) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 28\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:28\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3, Warnings: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = -1; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n         $this->verifySeparator($separator);\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n-        for ($i = 0; $i < count($recipients); $i++) {\n+        for ($i = -1; $i < count($recipients); $i++) {\n             $this->verifySeparator($separator);\n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0f95e009568a06701d6ec9cf0713da67.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\n2) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3, Warnings: 1."},{"mutator":{"mutatorName":"LessThan","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i <= count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n         $this->verifySeparator($separator);\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n-        for ($i = 0; $i < count($recipients); $i++) {\n+        for ($i = 0; $i <= count($recipients); $i++) {\n             $this->verifySeparator($separator);\n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.744e7113e4b3db57fd9741f9063944a0.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.015, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\n2) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3, Warnings: 1."},{"mutator":{"mutatorName":"LessThanNegotiation","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i >= count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n         $this->verifySeparator($separator);\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n-        for ($i = 0; $i < count($recipients); $i++) {\n+        for ($i = 0; $i >= count($recipients); $i++) {\n             $this->verifySeparator($separator);\n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.230e82ca766f500e5f7b40f5e9d70f46.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.015, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\n2) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3."},{"mutator":{"mutatorName":"Increment","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i--) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n         $this->verifySeparator($separator);\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n-        for ($i = 0; $i < count($recipients); $i++) {\n+        for ($i = 0; $i < count($recipients); $i--) {\n             $this->verifySeparator($separator);\n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7f22f5faed883daec5db47ead00d023a.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.028, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\n2) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nTypeError: EmailSender\\Application\\Service\\SendMail\\MailFactory::buildContact(): Argument #1 ($sentence) must be of type string, null given, called in \/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php on line 41\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:24\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:41\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3, Warnings: 1."},{"mutator":{"mutatorName":"For_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; false; $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n         $this->verifySeparator($separator);\n         \/** @var array<Int, Contact> *\/\n         $result = array();\n-        for ($i = 0; $i < count($recipients); $i++) {\n+        for ($i = 0; false; $i++) {\n             $this->verifySeparator($separator);\n             $result[$i] = $this->buildContact($recipients[$i], $separator);\n         }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.fee809cfd11c2c2c929f25d2763e201b.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 10.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nInvalidArgumentException: Recipients cannot be empty\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:43\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php:19\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:25\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Attachment.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getAttachment(): array\n+    protected function getAttachment(): array\n     {\n         return $this->attachment;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.800ef225b5534f1844adb01842f98640.infection.xml\n\nE.E                                                                 3 \/ 3 (100%)\n\nTime: 00:00.011, Memory: 10.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:70\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:33\n\n2) EmailSender\\Tests\\Domain\\AttachmentTest::testAttachment\nError: Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Tests\\Domain\\AttachmentTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/AttachmentTest.php:12\n\nERRORS!\nTests: 3, Assertions: 8, Errors: 2."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(string $name, string $address)\n     {\n         if (empty($name)) {\n-            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n+            new InvalidArgumentException(\"Contact name cannot be empty\");\n         }\n         if (empty($address)) {\n             throw new InvalidArgumentException(\"Contact address cannot be empty\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.921a36a9bc9443fe92cba93955442f07.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\ContactTest::testContactNameCannotBeEmpty\nFailed asserting that exception of type \"InvalidArgumentException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 13, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n             throw new InvalidArgumentException(\"Contact name cannot be empty\");\n         }\n         if (empty($address)) {\n-            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n+            new InvalidArgumentException(\"Contact address cannot be empty\");\n         }\n         $this->name = $name;\n         $this->address = $address;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0878d2ea280c6b78d1ce42b8a618d924.infection.xml\n\n..F\n\nTime: 00:00.011, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\ContactTest::testContactAddressCannotBeEmpty\nFailed asserting that exception of type \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException\" matches expected exception \"InvalidArgumentException\". Message was: \"Invalid email address: \" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:36\n.\n\nFAILURES!\nTests: 3, Assertions: 11, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    protected function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return filter_var($address, FILTER_VALIDATE_EMAIL);\n     }\n-    public function getName(): string\n+    protected function getName(): string\n     {\n         return $this->name;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bb81756291d4e908077bd3ebfd03f574.infection.xml\n\nE..E....EEE..                                                     13 \/ 13 (100%)\n\nTime: 00:00.021, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:60\n\n3) EmailSender\\Tests\\Domain\\ContactTest::testCreateAUsualEmailAdress\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Tests\\Domain\\ContactTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:15\n\n4) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:17\n\n5) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Recipient\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:16\n\nERRORS!\nTests: 13, Assertions: 24, Errors: 5."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    protected function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->name;\n     }\n-    public function getAddress(): string\n+    protected function getAddress(): string\n     {\n         if (!$this->isValidEmailAddress($this->address)) {\n             throw new MalformedAddressException(\"Invalid email address: {$this->address}\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5112b01e52a8597c1d31408cd4d5dc81.infection.xml\n\nEE.E..E...E..                                                     13 \/ 13 (100%)\n\nTime: 00:00.025, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:18\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n3) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Recipient\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:35\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:17\n\n4) EmailSender\\Tests\\Domain\\ContactTest::testCreateAUsualEmailAdress\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Tests\\Domain\\ContactTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:16\n\n5) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:61\n\nERRORS!\nTests: 13, Assertions: 29, Errors: 5."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if ($this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getAddress(): string\n     {\n-        if (!$this->isValidEmailAddress($this->address)) {\n+        if ($this->isValidEmailAddress($this->address)) {\n             throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n         }\n         return $this->address;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.57fbec5c7482b0c049f420ab5cd01ccb.infection.xml\n\nEE.E..E...E..                                                     13 \/ 13 (100%)\n\nTime: 00:00.025, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\SenderTest::testSender\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:18\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n3) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.fr\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:35\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:17\n\n4) EmailSender\\Tests\\Domain\\ContactTest::testCreateAUsualEmailAdress\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:16\n\n5) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: pedro@gmail.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:33\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:29\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:61\n\nERRORS!\nTests: 13, Assertions: 29, Errors: 5."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    protected function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/HtmlContent.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $htmlContent = \"\")\n     {\n     }\n-    public function getHtmlContent(): string\n+    protected function getHtmlContent(): string\n     {\n         return $this->htmlContent;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e243016ef7bdc3a4681a2de1c9e5dc96.infection.xml\n\nE.E                                                                 3 \/ 3 (100%)\n\nTime: 00:00.015, Memory: 10.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:62\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:31\n\n2) EmailSender\\Tests\\Domain\\HtmlContentTest::testHtmlContent\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Tests\\Domain\\HtmlContentTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/HtmlContentTest.php:12\n\nERRORS!\nTests: 3, Assertions: 6, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    protected function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n     {\n     }\n-    public function getSubject(): string\n+    protected function getSubject(): string\n     {\n         return $this->subject->getSubject();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.caf2cc93ce956a0e89b446003dd77f7e.infection.xml\n\nE.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.009, Memory: 10.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:26\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    protected function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->subject->getSubject();\n     }\n-    public function getSenderName(): string\n+    protected function getSenderName(): string\n     {\n         return $this->sender->getSenderName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bc13a9708adbb8b33cac3d2dff5ed1fe.infection.xml\n\nE..E.                                                               5 \/ 5 (100%)\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderName() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderName() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:60\n\nERRORS!\nTests: 5, Assertions: 7, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    protected function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->sender->getSenderName();\n     }\n-    public function getSenderAddress(): string\n+    protected function getSenderAddress(): string\n     {\n         return $this->sender->getSenderAddress();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f2424149324296d03a721772c27287f0.infection.xml\n\nE..E.                                                               5 \/ 5 (100%)\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderAddress() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderAddress() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:61\n\nERRORS!\nTests: 5, Assertions: 9, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    protected function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }\n-    public function getRecipientName(int $rank): string\n+    protected function getRecipientName(int $rank): string\n     {\n         return $this->recipient->getRecipientName($rank);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9105ea3ae496b711e7edbdffbaa7728a.infection.xml\n\nE.E..                                                               5 \/ 5 (100%)\n\nTime: 00:00.020, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientName() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientName() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:62\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    protected function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->recipient->getRecipientName($rank);\n     }\n-    public function getRecipientAddress(int $rank): string\n+    protected function getRecipientAddress(int $rank): string\n     {\n         return $this->recipient->getRecipientAddress($rank);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.91bd9637c3bda174ee6345691d37084a.infection.xml\n\nE..E.                                                               5 \/ 5 (100%)\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientAddress() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:30\n\n2) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientAddress() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:63\n\nERRORS!\nTests: 5, Assertions: 13, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    protected function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n     }\n-    public function getHtmlContent(): string\n+    protected function getHtmlContent(): string\n     {\n         return $this->htmlContent->getHtmlContent();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c9efe081dd0cb1570c316dc1ee8012a0.infection.xml\n\nE.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.010, Memory: 10.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:31\n\nERRORS!\nTests: 2, Assertions: 6, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":68},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getAttachment(): array\n+    protected function getAttachment(): array\n     {\n         return $this->attachment->getAttachment();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4fb4c2784f487fe852760cc42e360cad.infection.xml\n\nE.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.009, Memory: 10.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:33\n\nERRORS!\nTests: 2, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    protected function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":73},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->attachment->getAttachment();\n     }\n-    public function getMailId(): MailId\n+    protected function getMailId(): MailId\n     {\n         return $this->mailId;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a213dd74f3d235612775ca450c837fc9.infection.xml\n\nEEE.E                                                               5 \/ 5 (100%)\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailId() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:32\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMailWithCustomId\nError: Call to protected method EmailSender\\Domain\\Mail::getMailId() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:47\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactoryWithCustomId\nError: Call to protected method EmailSender\\Domain\\Mail::getMailId() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getMailId() from scope EmailSender\\Infrastructure\\Persistance\\EmailSenderRepositoryInMemory\n\n\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Persistance\/EmailSenderRepositoryInMemory.php:16\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:28\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\nERRORS!\nTests: 5, Assertions: 13, Errors: 4."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    protected function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Model\/Mail\/MailId.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function equals(MailId $otherId): bool\n+    protected function equals(MailId $otherId): bool\n     {\n         if ($this->id === $otherId->id) {\n             return true;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.13c44192cc61af0aac6454b8be245cb5.infection.xml\n\nE.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.008, Memory: 10.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\Model\\Mail\\MailIdTest::testIdentify\nError: Call to protected method EmailSender\\Domain\\Model\\Mail\\MailId::equals() from scope EmailSender\\Tests\\Domain\\Model\\Mail\\MailIdTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/Model\/Mail\/MailIdTest.php:15\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1."},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id !== $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Model\/Mail\/MailId.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function equals(MailId $otherId): bool\n     {\n-        if ($this->id === $otherId->id) {\n+        if ($this->id !== $otherId->id) {\n             return true;\n         }\n         return false;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.92d1ade0a92dcb433fb7424909b1db68.infection.xml\n\nF\n\nTime: 00:00.009, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\Model\\Mail\\MailIdTest::testIdentify\nFailed asserting that true is false.\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/Model\/Mail\/MailIdTest.php:15\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return true;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Model\/Mail\/MailId.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n         if ($this->id === $otherId->id) {\n             return true;\n         }\n-        return false;\n+        return true;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.dd985b7cdcb23203fe41b0df1472c437.infection.xml\n\nF\n\nTime: 00:00.008, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\Model\\Mail\\MailIdTest::testIdentify\nFailed asserting that true is false.\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/Model\/Mail\/MailIdTest.php:15\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private array $recipient)\n     {\n         if (empty($recipient)) {\n-            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n+            new InvalidArgumentException(\"Recipients cannot be empty\");\n         }\n     }\n     public function getRecipientName(int $rank): string","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a572bbe5a64cc5e143475723ef8b4a61.infection.xml\n\n..F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.010, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipientCannotBeEmpty\nFailed asserting that exception of type \"OutOfBoundsException\" matches expected exception \"InvalidArgumentException\". Message was: \"This recipient rank doesn't exist\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:24\n.\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    protected function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n             throw new InvalidArgumentException(\"Recipients cannot be empty\");\n         }\n     }\n-    public function getRecipientName(int $rank): string\n+    protected function getRecipientName(int $rank): string\n     {\n         if (!isset($this->recipient[$rank])) {\n             throw new OutOfBoundsException(\"This recipient rank doesn't exist\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.756ef9472cebe2c0c06c29c3fb4b773b.infection.xml\n\n.EE.F\n\nTime: 00:00.011, Memory: 10.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:44\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n2) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Tests\\Domain\\RecipientTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:16\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipientWithAnUnexistingRank\nFailed asserting that exception of type \"Error\" matches expected exception \"OutOfBoundsException\". Message was: \"Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Tests\\Domain\\RecipientTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:32\n.\n\nERRORS!\nTests: 5, Assertions: 7, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientName(int $rank): string\n     {\n-        if (!isset($this->recipient[$rank])) {\n+        if (isset($this->recipient[$rank])) {\n             throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n         }\n         return $this->recipient[$rank]->getName();","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.07c6626a4f29574b9fc7f6cc29f32477.infection.xml\n\n.EE.F\n\nTime: 00:00.012, Memory: 10.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nOutOfBoundsException: This recipient rank doesn't exist\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:44\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n2) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nOutOfBoundsException: This recipient rank doesn't exist\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:16\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipientWithAnUnexistingRank\nFailed asserting that exception of type \"Error\" matches expected exception \"OutOfBoundsException\". Message was: \"Call to a member function getName() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:23\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:32\n.\n\nERRORS!\nTests: 5, Assertions: 7, Errors: 2, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecipientName(int $rank): string\n     {\n         if (!isset($this->recipient[$rank])) {\n-            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n+            new OutOfBoundsException(\"This recipient rank doesn't exist\");\n         }\n         return $this->recipient[$rank]->getName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2885f8d0451f473315942f7cb6735f3b.infection.xml\n\n.F\n\nTime: 00:00.009, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipientWithAnUnexistingRank\nFailed asserting that exception of type \"Error\" matches expected exception \"OutOfBoundsException\". Message was: \"Call to a member function getName() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:23\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:32\n.\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    protected function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         return $this->recipient[$rank]->getName();\n     }\n-    public function getRecipientAddress(int $rank): string\n+    protected function getRecipientAddress(int $rank): string\n     {\n         if (!isset($this->recipient[$rank])) {\n             throw new OutOfBoundsException(\"This recipient rank doesn't exist\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1fd3ffe5cefeab3fb5ab72aaa8348d74.infection.xml\n\n.EE...E.                                                            8 \/ 8 (100%)\n\nTime: 00:00.019, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:49\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:30\n\n2) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Tests\\Domain\\RecipientTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:17\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:49\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:63\n\nERRORS!\nTests: 8, Assertions: 18, Errors: 3."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientAddress(int $rank): string\n     {\n-        if (!isset($this->recipient[$rank])) {\n+        if (isset($this->recipient[$rank])) {\n             throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n         }\n         return $this->recipient[$rank]->getAddress();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.27ea92230bbc729d85ca748e327351af.infection.xml\n\n.EE...E.                                                            8 \/ 8 (100%)\n\nTime: 00:00.021, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nOutOfBoundsException: This recipient rank doesn't exist\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:49\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:30\n\n2) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nOutOfBoundsException: This recipient rank doesn't exist\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:28\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:17\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nOutOfBoundsException: This recipient rank doesn't exist\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:49\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:63\n\nERRORS!\nTests: 8, Assertions: 18, Errors: 3."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse ArgumentCountError;\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse ArgumentCountError;\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    protected function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string $sender\n      *\/\n-    public function getSenderName(): string\n+    protected function getSenderName(): string\n     {\n         return $this->sender->getName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7851c76211893e0364a542ba196eb2e5.infection.xml\n\nE.EE..                                                              6 \/ 6 (100%)\n\nTime: 00:00.015, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Tests\\Domain\\SenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:17\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:60\n\nERRORS!\nTests: 6, Assertions: 8, Errors: 3."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse ArgumentCountError;\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse ArgumentCountError;\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    protected function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string $sender\n      *\/\n-    public function getSenderAddress(): string\n+    protected function getSenderAddress(): string\n     {\n         return $this->sender->getAddress();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2f131769539ff0fabefcf69f3692b02b.infection.xml\n\nE.EE..                                                              6 \/ 6 (100%)\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Tests\\Domain\\SenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:18\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n3) EmailSender\\Tests\\EmailSenderTest::testMailFactory\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:61\n\nERRORS!\nTests: 6, Assertions: 11, Errors: 3."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nclass Subject\n{\n    public function __construct(private string $subject)\n    {\n    }\n    public function getSubject(): string\n    {\n        if (empty($this->subject)) {\n            throw new InvalidArgumentException(\"Subject cannot be empty\");\n        }\n        return $this->subject;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nclass Subject\n{\n    public function __construct(private string $subject)\n    {\n    }\n    protected function getSubject(): string\n    {\n        if (empty($this->subject)) {\n            throw new InvalidArgumentException(\"Subject cannot be empty\");\n        }\n        return $this->subject;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Subject.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $subject)\n     {\n     }\n-    public function getSubject(): string\n+    protected function getSubject(): string\n     {\n         if (empty($this->subject)) {\n             throw new InvalidArgumentException(\"Subject cannot be empty\");","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3f81d2cb48edf5f1aae8c74e886a4573.infection.xml\n\nE.EF                                                                4 \/ 4 (100%)\n\nTime: 00:00.010, Memory: 10.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:26\n\n2) EmailSender\\Tests\\Domain\\SubjectTest::testSubject\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Tests\\Domain\\SubjectTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SubjectTest.php:13\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\SubjectTest::testSubjectIsNotEmpty\nFailed asserting that exception of type \"Error\" matches expected exception \"InvalidArgumentException\". Message was: \"Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Tests\\Domain\\SubjectTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SubjectTest.php:20\n.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nclass Subject\n{\n    public function __construct(private string $subject)\n    {\n    }\n    public function getSubject(): string\n    {\n        if (empty($this->subject)) {\n            throw new InvalidArgumentException(\"Subject cannot be empty\");\n        }\n        return $this->subject;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nclass Subject\n{\n    public function __construct(private string $subject)\n    {\n    }\n    public function getSubject(): string\n    {\n        if (empty($this->subject)) {\n            new InvalidArgumentException(\"Subject cannot be empty\");\n        }\n        return $this->subject;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Subject.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function getSubject(): string\n     {\n         if (empty($this->subject)) {\n-            throw new InvalidArgumentException(\"Subject cannot be empty\");\n+            new InvalidArgumentException(\"Subject cannot be empty\");\n         }\n         return $this->subject;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.46fd7dd27fdb6721b9baf72930998f7b.infection.xml\n\n.F                                                                  2 \/ 2 (100%)\n\nTime: 00:00.008, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Domain\\SubjectTest::testSubjectIsNotEmpty\nFailed asserting that exception of type \"InvalidArgumentException\" is thrown.\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            throw new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse EmailSender\\Domain\\EmailSenderRepositoryInterface;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass EmailSender\n{\n    private ResponseSendMail $response;\n    public function __construct(private EmailSenderRepositoryInterface $respository, private EmailApiInterface $emailApi, private string $mailId = \"\")\n    {\n    }\n    public function execute(RequestEmailSender $request): void\n    {\n        if ($request == null) {\n            new \\InvalidArgumentException(\"Request cannot be null\");\n        }\n        $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n        $this->emailApi->sendEmail($mail);\n        $this->respository->add($mail);\n        $this->response = new ResponseSendMail($mail->getMailId());\n    }\n    public function getResponse(): ResponseSendMail\n    {\n        return $this->response;\n    }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ public function contentEmailData(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     return [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ }\n    \/\/ \/**\n    \/\/  * @return array<string, mixed>\n    \/\/  *\/\n    \/\/ \/*\n    \/\/ public function sendMail(RequestEmailSender $request): array\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $emailData = $this->contentEmailData($request);\n    \/\/         try {\n    \/\/             return $this->emailApi->sendEmail($emailData);\n    \/\/         } catch (ErrorMailSenderException $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ $emailData = [\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ];\n    \/\/ public function __construct(string $apiKey, ClientInterface $client = new Client())\n    \/\/ {\n    \/\/     $config = Configuration::getDefaultConfiguration()\n    \/\/         ->setApiKey(self::API_KEY, $apiKey);\n    \/\/     $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    \/\/ }\n    \/\/ public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    \/\/ {\n    \/\/     if (isset($this->user)) {\n    \/\/         $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \/\/         try {\n    \/\/             return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n    \/\/         } catch (Exception $e) {\n    \/\/             throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n    \/\/         }\n    \/\/     }\n    \/\/     throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    \/\/ }\n    \/\/ public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    \/\/ {\n    \/\/     return new SendSmtpEmail([\n    \/\/         'subject' => $request->mail->getSubject(),\n    \/\/         'sender' => $request->mail->getSenderData(),\n    \/\/         'to' => $request->mail->getRecipientData(),\n    \/\/         'htmlContent' => $request->mail->getHtmlContent(),\n    \/\/         'attachment' => $request->mail->getAttachment(),\n    \/\/     ]);\n    \/\/ }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     public function execute(RequestEmailSender $request): void\n     {\n         if ($request == null) {\n-            throw new \\InvalidArgumentException(\"Request cannot be null\");\n+            new \\InvalidArgumentException(\"Request cannot be null\");\n         }\n         $mail = (new MailFactory())->buildMailFromRequest($request, new MailId($this->mailId));\n         $this->emailApi->sendEmail($mail);","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            throw new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse EmailSender\\Domain\\Attachment;\nuse EmailSender\\Domain\\Contact;\nuse EmailSender\\Domain\\HtmlContent;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse EmailSender\\Domain\\Recipient;\nuse EmailSender\\Domain\\Sender;\nuse EmailSender\\Domain\\Subject;\nuse InvalidArgumentException;\nuse Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException;\nclass MailFactory\n{\n    public function buildMailFromRequest(RequestEmailSender $request, MailId $mailId = new MailId()): Mail\n    {\n        return new Mail(new Subject($request->subject), new Sender($this->buildContact($request->sender, \", \")), $this->buildRecipient($request->recipient, \", \"), new HtmlContent($request->content), new Attachment(), $mailId);\n    }\n    \/**\n     * @param non-empty-string $separator\n     *\/\n    private function buildContact(string $sentence, string $separator): Contact\n    {\n        $this->verifySeparator($separator);\n        $tab = explode($separator, $sentence);\n        return new Contact($tab[0], $tab[1]);\n    }\n    \/**\n     * @param array<string> $recipients\n     * @param non-empty-string $separator\n     *\/\n    private function buildRecipient(array $recipients, string $separator): Recipient\n    {\n        $this->verifySeparator($separator);\n        \/** @var array<Int, Contact> *\/\n        $result = array();\n        for ($i = 0; $i < count($recipients); $i++) {\n            $this->verifySeparator($separator);\n            $result[$i] = $this->buildContact($recipients[$i], $separator);\n        }\n        return new Recipient($result);\n    }\n    private function verifySeparator(string $separator): string\n    {\n        if (empty($separator)) {\n            new InvalidArgumentException(\"Separator cannot be empty\");\n        } else {\n            return $separator;\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/MailFactory.php","originalStartLine":63},"diff":"--- Original\n+++ New\n@@ @@\n     private function verifySeparator(string $separator): string\n     {\n         if (empty($separator)) {\n-            throw new InvalidArgumentException(\"Separator cannot be empty\");\n+            new InvalidArgumentException(\"Separator cannot be empty\");\n         } else {\n             return $separator;\n         }\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nuse InvalidArgumentException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (empty($name)) {\n            throw new InvalidArgumentException(\"Contact name cannot be empty\");\n        }\n        if (empty($address)) {\n            throw new InvalidArgumentException(\"Contact address cannot be empty\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        if (!$this->isValidEmailAddress($this->address)) {\n            new MalformedAddressException(\"Invalid email address: {$this->address}\");\n        }\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     public function getAddress(): string\n     {\n         if (!$this->isValidEmailAddress($this->address)) {\n-            throw new MalformedAddressException(\"Invalid email address: {$this->address}\");\n+            new MalformedAddressException(\"Invalid email address: {$this->address}\");\n         }\n         return $this->address;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    protected function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string>\n      *\/\n-    public function getSenderData(): array\n+    protected function getSenderData(): array\n     {\n         return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' > $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['name' > $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }\n     public function getRecipientName(int $rank): string\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' > $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['name' => $this->getSenderName(), 'email' > $this->getSenderAddress()];\n     }\n     public function getRecipientName(int $rank): string\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['email' => $this->getSenderAddress()];\n     }\n     public function getRecipientName(int $rank): string\n     {","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    protected function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string>\n      *\/\n-    public function getRecipientData(int $rank): array\n+    protected function getRecipientData(int $rank): array\n     {\n         return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n     }","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' > $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(int $rank): array\n     {\n-        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n+        return ['name' > $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' > $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(int $rank): array\n     {\n-        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n+        return ['name' => $this->getRecipientName($rank), 'email' > $this->getRecipientAddress($rank)];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment, private MailId $mailId = new MailId())\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(int $rank): string\n    {\n        return $this->recipient->getRecipientName($rank);\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        return $this->recipient->getRecipientAddress($rank);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(int $rank): array\n    {\n        return ['email' => $this->getRecipientAddress($rank)];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n    public function getMailId(): MailId\n    {\n        return $this->mailId;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(int $rank): array\n     {\n-        return ['name' => $this->getRecipientName($rank), 'email' => $this->getRecipientAddress($rank)];\n+        return ['email' => $this->getRecipientAddress($rank)];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":""},{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain\\Model\\Mail;\n\nclass MailId\n{\n    private string $id;\n    public function __construct(string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"mai_\");\n        } else {\n            $this->id = $id;\n        }\n    }\n    public function __toString()\n    {\n        return $this->id;\n    }\n    public function equals(MailId $otherId): bool\n    {\n        if ($this->id === $otherId->id) {\n            return false;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Model\/Mail\/MailId.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     public function equals(MailId $otherId): bool\n     {\n         if ($this->id === $otherId->id) {\n-            return true;\n+            return false;\n         }\n         return false;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n        if (empty($recipient)) {\n            throw new InvalidArgumentException(\"Recipients cannot be empty\");\n        }\n    }\n    public function getRecipientName(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getName();\n    }\n    public function getRecipientAddress(int $rank): string\n    {\n        if (!isset($this->recipient[$rank])) {\n            new OutOfBoundsException(\"This recipient rank doesn't exist\");\n        }\n        return $this->recipient[$rank]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecipientAddress(int $rank): string\n     {\n         if (!isset($this->recipient[$rank])) {\n-            throw new OutOfBoundsException(\"This recipient rank doesn't exist\");\n+            new OutOfBoundsException(\"This recipient rank doesn't exist\");\n         }\n         return $this->recipient[$rank]->getAddress();\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\EmailSender;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private const HTTP_ERROR_500 = 500;\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(Mail $email): MailId\n    {\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        $emailSender = (new EmailSender($respository, $emailApi))->execute($request);\n        try {\n            \/\/$response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            \/\/return ['messageId' => $response->getMessageId()];\n            return $this->mail->getResponse();\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", self::HTTP_ERROR_500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\EmailSender;\nuse EmailSender\\Domain\\Mail;\nuse EmailSender\\Domain\\Model\\Mail\\MailId;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private const HTTP_ERROR_500 = 500;\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(Mail $email): MailId\n    {\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        $emailSender = (new EmailSender($respository, $emailApi))->execute($request);\n        try {\n            \/\/$response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            \/\/return ['messageId' => $response->getMessageId()];\n            return $this->mail->getResponse();\n        } catch (Exception $e) {\n            new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", self::HTTP_ERROR_500, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             \/\/return ['messageId' => $response->getMessageId()];\n             return $this->mail->getResponse();\n         } catch (Exception $e) {\n-            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", self::HTTP_ERROR_500, $e);\n+            new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", self::HTTP_ERROR_500, $e);\n         }\n     }\n }","processOutput":""}],"ignored":[]}