{"stats":{"totalMutantsCount":47,"killedCount":37,"notCoveredCount":0,"escapedCount":10,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":78.72,"mutationCodeCoverage":100,"coveredCodeMsi":78.72},"escaped":[{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(string $name, string $address)\n     {\n         if (!$this->isValidEmailAddress($address)) {\n-            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n+            new MalformedAddressException(\"Invalid email address: {$address}\");\n         }\n         $this->name = $name;\n         $this->address = $address;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8768585c63fd5a480ef8fd11d39630bf.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.007, Memory: 10.00 MB\n\nOK (2 tests, 10 assertions)"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' > $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['name' => $this->getSenderName(), 'email' > $this->getSenderAddress()];\n     }\n     public function getRecipientName(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cd40ef59dfe155f15b61231b5698bbc3.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [0]=>\n    bool(false)\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.027, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['email' => $this->getSenderAddress()];\n     }\n     public function getRecipientName(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.827f488b76dda429ba0ac329f4e5c99f.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(1) {\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.027, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' > $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getSenderData(): array\n     {\n-        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n+        return ['name' > $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }\n     public function getRecipientName(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.99919604ef6aacb106ddb5c345abb6bc.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [0]=>\n    bool(true)\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.033, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' > $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(): array\n     {\n-        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n+        return ['name' > $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e6764e0282db27e0cc023520f8319c42.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [0]=>\n    bool(true)\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.038, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' > $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(): array\n     {\n-        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n+        return ['name' => $this->getRecipientName(), 'email' > $this->getRecipientAddress()];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c3025ca0baa65528c31f558c0da73fbd.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [0]=>\n    bool(false)\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.031, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getRecipientData(): array\n     {\n-        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n+        return ['email' => $this->getRecipientAddress()];\n     }\n     public function getHtmlContent(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.70a48a9c9d7a60744007157542364006.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(1) {\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.027, Memory: 12.00 MB\n\nOK (6 tests, 7 assertions)"},{"mutator":{"mutatorName":"FunctionCallRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        \n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function sendEmail(array $emailData): array\n     {\n-        var_dump($emailData);\n+        \n         $sendSmtpEmail = new SendSmtpEmail($emailData);\n         try {\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4c1a334d3f6cd03ee836c2f32e21e37d.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.020, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 499, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n             return ['messageId' => $response->getMessageId()];\n         } catch (Exception $e) {\n-            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n+            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 499, $e);\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.93b24e17005babb286bea882b41536c6.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.020, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 501, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n             return ['messageId' => $response->getMessageId()];\n         } catch (Exception $e) {\n-            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n+            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 501, $e);\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1105c04e41f21f7f104faac6cbdc8d80.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.017, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    protected function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->emailApi = $emailApi;\n     }\n-    public function isAuthenticated(string $user): ResponseIsAuth\n+    protected function isAuthenticated(string $user): ResponseIsAuth\n     {\n         $this->user = $user;\n         return new ResponseIsAuth($this->user);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c14b4ecc9a1a6aaa9c038eeb8f88a40d.infection.xml\n\nE.F\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::isAuthenticated() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:35\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::isAuthenticated() from scope EmailSender\\Tests\\EmailSenderTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:57\n.\n\nERRORS!\nTests: 3, Assertions: 2, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    protected function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         $this->user = $user;\n         return new ResponseIsAuth($this->user);\n     }\n-    public function sendMail(RequestEmailSender $request): array\n+    protected function sendMail(RequestEmailSender $request): array\n     {\n         if (isset($this->user)) {\n             $emailData = $this->contentEmailData($request);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d2713f586c86a5c524d3422578cc8289.infection.xml\n\nEF\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailAuthFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\". Message was: \"Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail() from scope EmailSender\\Tests\\EmailSenderTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:47\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n             try {\n                 return $this->emailApi->sendEmail($emailData);\n             } catch (ErrorMailSenderException $e) {\n-                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n+                new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n             }\n         }\n         throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.703b082c633d3820c1a52b42db601385.infection.xml\n\n..F\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Utilisateur non authentifi\u00e9\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:43\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nFAILURES!\nTests: 3, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n                 throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n             }\n         }\n-        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n+        new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3c7c556ca6ef46242bccb670c1039970.infection.xml\n\n.F\n\nTime: 00:00.015, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailAuthFailure\nFailed asserting that exception of type \"TypeError\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\". Message was: \"EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail(): Return value must be of type array, none returned\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:44\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:47\n.\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    protected function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n     }\n-    public function contentEmailData(RequestEmailSender $request): array\n+    protected function contentEmailData(RequestEmailSender $request): array\n     {\n         return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.91c36ee0708c8b8886956da520376c35.infection.xml\n\n.E..Earray(0) {\n}\n.                                                              6 \/ 6 (100%)\n\nTime: 00:00.036, Memory: 14.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::contentEmailData() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:75\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::contentEmailData() from scope EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\nERRORS!\nTests: 6, Assertions: 5, Errors: 2."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ec82280b31b86f831135c6908eaf3110.infection.xml\n\n.F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'to' => [...]\n     'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n     'attachment' => []\n+    'subject' => 'Test Email Infra'\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' > $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['subject' > $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e7babb5ae9c90c28f722893ca809017b.infection.xml\n\n.F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => true\n     'sender' => [...]\n     'to' => [...]\n     'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n     'attachment' => []\n+    'subject' => 'Test Email Infra'\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' > $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":56},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['subject' => $request->mail->getSubject(), 'sender' > $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.eb5c5e086b35d949c30623f815becf2e.infection.xml\n\n.F\n\nTime: 00:00.026, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'subject' => 'Test Email Infra'\n-    0 => false\n     'to' => [...]\n     'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n     'attachment' => []\n+    'sender' => [...]\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' > $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' > $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2916acdc43106b22637f7002168e4f6d.infection.xml\n\n.F\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'subject' => 'Test Email Infra'\n     'sender' => [...]\n-    0 => false\n     'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n     'attachment' => []\n+    'to' => [...]\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' > $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' > $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5d80be4f8009e3b5f5cdc3b316b9a41e.infection.xml\n\n.F\n\nTime: 00:00.020, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'subject' => 'Test Email Infra'\n     'sender' => [...]\n     'to' => [...]\n-    0 => true\n     'attachment' => []\n+    'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private EmailApiInterface $emailApi;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): array\n    {\n        if (isset($this->user)) {\n            $emailData = $this->contentEmailData($request);\n            try {\n                return $this->emailApi->sendEmail($emailData);\n            } catch (ErrorMailSenderException $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentEmailData(RequestEmailSender $request): array\n    {\n        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' > $request->mail->getAttachment()];\n    }\n    \/*\n        public function __construct(string $apiKey, ClientInterface $client = new Client())\n        {\n            $config = Configuration::getDefaultConfiguration()\n                ->setApiKey(self::API_KEY, $apiKey);\n    \n            $this->apiInstance = new TransactionalEmailsApi($client, $config);\n        }\n    \n    \n        public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n        {\n            if (isset($this->user)) {\n                $sendSmtpEmail = $this->contentSmtpEmail($request);\n    \n                try {\n                    return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n                } catch (Exception $e) {\n                    throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n                }\n            }\n    \n            throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n        }\n    \n        public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n        {\n            return new SendSmtpEmail([\n                'subject' => $request->mail->getSubject(),\n                'sender' => $request->mail->getSenderData(),\n                'to' => $request->mail->getRecipientData(),\n                'htmlContent' => $request->mail->getHtmlContent(),\n                'attachment' => $request->mail->getAttachment(),\n            ]);\n        }*\/\n}\n\/*\n    public function __construct(EmailApiInterface $emailApi)\n    {\n        $this->emailApi = $emailApi;\n    }\n\n    public function sendMail(RequestEmailSender $request): bool\n    {\n        if (isset($this->user)) {\n            $mailData = $this->contentMailData($request);\n\n            try {\n                return $this->emailApi->sendMail($mailData);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n\n    public function contentMailData(RequestEmailSender $request): array\n    {\n        return [\n            'subject' => $request->mail->getSubject(),\n            'sender' => $request->mail->getSenderData(),\n            'to' => $request->mail->getRecipientData(),\n            'htmlContent' => $request->mail->getHtmlContent(),\n            'attachment' => $request->mail->getAttachment(),\n        ];\n    }\n*\/","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentEmailData(RequestEmailSender $request): array\n     {\n-        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' => $request->mail->getAttachment()];\n+        return ['subject' => $request->mail->getSubject(), 'sender' => $request->mail->getSenderData(), 'to' => $request->mail->getRecipientData(), 'htmlContent' => $request->mail->getHtmlContent(), 'attachment' > $request->mail->getAttachment()];\n     }\n     \/*\n         public function __construct(string $apiKey, ClientInterface $client = new Client())","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a04ee427451082a53541d00338d2c52e.infection.xml\n\nF\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'sender' => [...]\n     'to' => [...]\n     'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n-    0 => false\n+    'attachment' => []\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:76\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Attachment.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getAttachment(): array\n+    protected function getAttachment(): array\n     {\n         return $this->attachment;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.800ef225b5534f1844adb01842f98640.infection.xml\n\nEF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:67\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:67\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if ($this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     private string $address;\n     public function __construct(string $name, string $address)\n     {\n-        if (!$this->isValidEmailAddress($address)) {\n+        if ($this->isValidEmailAddress($address)) {\n             throw new MalformedAddressException(\"Invalid email address: {$address}\");\n         }\n         $this->name = $name;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ba405c35d1c0857af8bf61893a238f5c.infection.xml\n\nEarray(0) {\n}\n.EEEEE.EEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere were 9 errors:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:35\n\n2) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:83\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:67\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:83\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:55\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailAuthFailure\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:83\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:45\n\n5) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:83\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:34\n\n6) EmailSender\\Tests\\Domain\\ContactTest::testCreateAUsualEmailAdress\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:13\n\n7) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.fr\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:14\n\n8) EmailSender\\Tests\\Domain\\MailTest::testMail\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: sender@example.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:20\n\n9) EmailSender\\Tests\\Domain\\SenderTest::testSender\nEmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException: Invalid email address: morgan.chemarin@logipro.com\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php:13\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:13\n\nERRORS!\nTests: 11, Assertions: 9, Errors: 9."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    protected function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return filter_var($address, FILTER_VALIDATE_EMAIL);\n     }\n-    public function getName(): string\n+    protected function getName(): string\n     {\n         return $this->name;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0d9e5f16c3fc75abaeb1b51be443fece.infection.xml\n\nEarray(0) {\n}\n.EF\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:19\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n2) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:19\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:68\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Contact::getName() from scope EmailSender\\Domain\\Sender\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:19\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    public function getAddress(): string\n    {\n        return $this->address;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\MalformedAddressException;\nclass Contact\n{\n    private string $name;\n    private string $address;\n    public function __construct(string $name, string $address)\n    {\n        if (!$this->isValidEmailAddress($address)) {\n            throw new MalformedAddressException(\"Invalid email address: {$address}\");\n        }\n        $this->name = $name;\n        $this->address = $address;\n    }\n    private function isValidEmailAddress(string $address): mixed\n    {\n        return filter_var($address, FILTER_VALIDATE_EMAIL);\n    }\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    protected function getAddress(): string\n    {\n        return $this->address;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Contact.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->name;\n     }\n-    public function getAddress(): string\n+    protected function getAddress(): string\n     {\n         return $this->address;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3470217b34519fa8c67bef2e0179f66e.infection.xml\n\nE.EEEEarray(0) {\n}\n.E.F\n\nTime: 00:00.034, Memory: 12.00 MB\n\nThere were 6 errors:\n\n1) EmailSender\\Tests\\Domain\\ContactTest::testCreateAUsualEmailAdress\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Tests\\Domain\\ContactTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/ContactTest.php:15\n\n2) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Recipient\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:16\n\n3) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:27\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\n4) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:27\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:15\n\n5) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:27\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n6) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:27\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Contact::getAddress() from scope EmailSender\\Domain\\Sender\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php:27\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 10, Assertions: 16, Errors: 6, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    protected function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/HtmlContent.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $htmlContent = \"\")\n     {\n     }\n-    public function getHtmlContent(): string\n+    protected function getHtmlContent(): string\n     {\n         return $this->htmlContent;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e243016ef7bdc3a4681a2de1c9e5dc96.infection.xml\n\nEEarray(0) {\n}\n..EEF\n\nTime: 00:00.031, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:59\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:30\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:59\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:70\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 8, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    protected function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n     {\n     }\n-    public function getSubject(): string\n+    protected function getSubject(): string\n     {\n         return $this->subject->getSubject();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0e1195b1e6ad2559d42b19a2c61e32d5.infection.xml\n\nEEarray(0) {\n}\n..EEF                                                             7 \/ 7 (100%)\n\nTime: 00:00.029, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:25\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:67\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getSubject() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    protected function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->subject->getSubject();\n     }\n-    public function getSenderName(): string\n+    protected function getSenderName(): string\n     {\n         return $this->sender->getSenderName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b1db5e9b89c18e11a2361b5d43cac413.infection.xml\n\nEarray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                             7 \/ 7 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderName() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:26\n\nERRORS!\nTests: 7, Assertions: 8, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    protected function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->sender->getSenderName();\n     }\n-    public function getSenderAddress(): string\n+    protected function getSenderAddress(): string\n     {\n         return $this->sender->getSenderAddress();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6c0dfeca6ffe59049b569b9fba0feb3e.infection.xml\n\nEarray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                             7 \/ 7 (100%)\n\nTime: 00:00.031, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderAddress() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\nERRORS!\nTests: 7, Assertions: 9, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    protected function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string>\n      *\/\n-    public function getSenderData(): array\n+    protected function getSenderData(): array\n     {\n         return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.822d8f4a43a37b0356d179227f7c61b7.infection.xml\n\nEarray(0) {\n}\n.EE.F                                                              6 \/ 6 (100%)\n\nTime: 00:00.044, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n2) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderData() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:68\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getSenderData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getSenderData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 6, Assertions: 3, Errors: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    protected function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n     }\n-    public function getRecipientName(): string\n+    protected function getRecipientName(): string\n     {\n         return $this->recipient->getRecipientName(0);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.16170a434ddce461162ab902081413cd.infection.xml\n\nEarray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                             7 \/ 7 (100%)\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientName() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\nERRORS!\nTests: 7, Assertions: 10, Errors: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(-1);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientName(): string\n     {\n-        return $this->recipient->getRecipientName(0);\n+        return $this->recipient->getRecipientName(-1);\n     }\n     public function getRecipientAddress(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9329443e274e8ae130709b7da8688b0a.infection.xml\n\nEEarray(0) {\n}\n.EE.F                                                             7 \/ 7 (100%)\n\nTime: 00:00.031, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to a member function getName() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 6, Errors: 4, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(1);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientName(): string\n     {\n-        return $this->recipient->getRecipientName(0);\n+        return $this->recipient->getRecipientName(1);\n     }\n     public function getRecipientAddress(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b0d5b29378374c7ac246b3f7f30ca6f3.infection.xml\n\nEEarray(0) {\n}\n..EEF                                                             7 \/ 7 (100%)\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n4) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to a member function getName() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to a member function getName() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:16\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:31\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 6, Errors: 4, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    protected function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->recipient->getRecipientName(0);\n     }\n-    public function getRecipientAddress(): string\n+    protected function getRecipientAddress(): string\n     {\n         return $this->recipient->getRecipientAddress(0);\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6341af85589a3826d4e4c7e61406c0e0.infection.xml\n\nEarray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\n.....                                                             7 \/ 7 (100%)\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientAddress() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\nERRORS!\nTests: 7, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(-1);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientAddress(): string\n     {\n-        return $this->recipient->getRecipientAddress(0);\n+        return $this->recipient->getRecipientAddress(-1);\n     }\n     \/**\n      * @return array<string, string>","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bfdb08075cf53682263d216ea8b99729.infection.xml\n\nEEarray(0) {\n}\n.EE.F                                                             7 \/ 7 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to a member function getAddress() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 7, Errors: 4, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(1);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getRecipientAddress(): string\n     {\n-        return $this->recipient->getRecipientAddress(0);\n+        return $this->recipient->getRecipientAddress(1);\n     }\n     \/**\n      * @return array<string, string>","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.691441086901e28860341ca2d09cb359.infection.xml\n\nEEarray(0) {\n}\n.EE.F                                                             7 \/ 7 (100%)\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to a member function getAddress() on null\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to a member function getAddress() on null\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php:21\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:35\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:42\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 7, Errors: 4, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    protected function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string>\n      *\/\n-    public function getRecipientData(): array\n+    protected function getRecipientData(): array\n     {\n         return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.25caf29a3231583054340c4058bbf575.infection.xml\n\nEarray(0) {\n}\n.EE.F                                                              6 \/ 6 (100%)\n\nTime: 00:00.029, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n2) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientData() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getRecipientData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getRecipientData() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 6, Assertions: 3, Errors: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    protected function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n     }\n-    public function getHtmlContent(): string\n+    protected function getHtmlContent(): string\n     {\n         return $this->htmlContent->getHtmlContent();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f7bf244173c194d146442a5ee6c8f212.infection.xml\n\nEEarray(0) {\n}\n.EE.F                                                             7 \/ 7 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:30\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:70\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getHtmlContent() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 8, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private Recipient $recipient, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    public function getSenderName(): string\n    {\n        return $this->sender->getSenderName();\n    }\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getSenderAddress();\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getSenderData(): array\n    {\n        return ['name' => $this->getSenderName(), 'email' => $this->getSenderAddress()];\n    }\n    public function getRecipientName(): string\n    {\n        return $this->recipient->getRecipientName(0);\n    }\n    public function getRecipientAddress(): string\n    {\n        return $this->recipient->getRecipientAddress(0);\n    }\n    \/**\n     * @return array<string, string>\n     *\/\n    public function getRecipientData(): array\n    {\n        return ['name' => $this->getRecipientName(), 'email' => $this->getRecipientAddress()];\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":65},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getAttachment(): array\n+    protected function getAttachment(): array\n     {\n         return $this->attachment->getAttachment();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.488f0e130a3a0b28db4722397d02d6b2.infection.xml\n\nEEarray(0) {\n}\n..EEF                                                             7 \/ 7 (100%)\n\nTime: 00:00.028, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Tests\\Domain\\MailTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:31\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\n\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n4) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getAttachment() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 9, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n    }\n    public function getRecipientName(int $rang): string\n    {\n        return $this->recipient[$rang]->getName();\n    }\n    public function getRecipientAddress(int $rang): string\n    {\n        return $this->recipient[$rang]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n    }\n    protected function getRecipientName(int $rang): string\n    {\n        return $this->recipient[$rang]->getName();\n    }\n    public function getRecipientAddress(int $rang): string\n    {\n        return $this->recipient[$rang]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private array $recipient)\n     {\n     }\n-    public function getRecipientName(int $rang): string\n+    protected function getRecipientName(int $rang): string\n     {\n         return $this->recipient[$rang]->getName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.65f96ede0154c95b7d4f1f30e38541dc.infection.xml\n\nEEEarray(0) {\n}\n..EEF                                                            8 \/ 8 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Tests\\Domain\\RecipientTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:15\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:41\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:28\n\n3) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:41\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:41\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n5) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:41\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Recipient::getRecipientName() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:41\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 8, Assertions: 6, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n    }\n    public function getRecipientName(int $rang): string\n    {\n        return $this->recipient[$rang]->getName();\n    }\n    public function getRecipientAddress(int $rang): string\n    {\n        return $this->recipient[$rang]->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Recipient\n{\n    \/**\n     * @param array<int, Contact> $recipient\n     *\/\n    public function __construct(private array $recipient)\n    {\n    }\n    public function getRecipientName(int $rang): string\n    {\n        return $this->recipient[$rang]->getName();\n    }\n    protected function getRecipientAddress(int $rang): string\n    {\n        return $this->recipient[$rang]->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Recipient.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->recipient[$rang]->getName();\n     }\n-    public function getRecipientAddress(int $rang): string\n+    protected function getRecipientAddress(int $rang): string\n     {\n         return $this->recipient[$rang]->getAddress();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.190d09b7a7aca8f2482de9cdd382f11e.infection.xml\n\nEEEarray(0) {\n}\n.EE.F                                                            8 \/ 8 (100%)\n\nTime: 00:00.042, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\RecipientTest::testRecipient\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Tests\\Domain\\RecipientTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/RecipientTest.php:16\n\n2) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:46\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:29\n\n3) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:46\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n4) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:46\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:69\n\n5) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:46\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Recipient::getRecipientAddress() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:46\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:54\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 8, Assertions: 8, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    protected function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string $sender\n      *\/\n-    public function getSenderName(): string\n+    protected function getSenderName(): string\n     {\n         return $this->sender->getName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.468d0b3013f4522b46958d3b94cecab0.infection.xml\n\nEEEarray(0) {\n}\n.EE.F                                                            8 \/ 8 (100%)\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:26\n\n2) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Tests\\Domain\\SenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:14\n\n3) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n4) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:68\n\n5) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Sender::getSenderName() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:23\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 8, Assertions: 4, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Sender\n{\n    \/**\n     * @param Contact $sender\n     *\/\n    public function __construct(private Contact $sender)\n    {\n    }\n    \/**\n     * @return string $sender\n     *\/\n    public function getSenderName(): string\n    {\n        return $this->sender->getName();\n    }\n    \/**\n     * @return string $sender\n     *\/\n    protected function getSenderAddress(): string\n    {\n        return $this->sender->getAddress();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string $sender\n      *\/\n-    public function getSenderAddress(): string\n+    protected function getSenderAddress(): string\n     {\n         return $this->sender->getAddress();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2410faa8aa390bc35ba8ffb3428f1813.infection.xml\n\nEEEarray(0) {\n}\n..EEF                                                            8 \/ 8 (100%)\n\nTime: 00:00.033, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:27\n\n2) EmailSender\\Tests\\Domain\\SenderTest::testSender\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Tests\\Domain\\SenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/SenderTest.php:15\n\n3) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n4) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n5) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:68\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Sender::getSenderAddress() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:28\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:36\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:56\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 8, Assertions: 6, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Subject\n{\n    public function __construct(private string $subject = \"\")\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Subject\n{\n    public function __construct(private string $subject = \"\")\n    {\n    }\n    protected function getSubject(): string\n    {\n        return $this->subject;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Subject.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $subject = \"\")\n     {\n     }\n-    public function getSubject(): string\n+    protected function getSubject(): string\n     {\n         return $this->subject;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cb7508bf5446a811b4472add2fe8689d.infection.xml\n\nEEarray(0) {\n}\n..EEF\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) EmailSender\\Tests\\Domain\\MailTest::testMail\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/tests\/unit\/Domain\/MailTest.php:25\n\n2) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:43\n\n3) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:36\n\n4) EmailSender\\Tests\\EmailSenderTest::testContentEmailData\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:67\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:55\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:40\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' > $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n         $sendSmtpEmail = new SendSmtpEmail($emailData);\n         try {\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n-            return ['messageId' => $response->getMessageId()];\n+            return ['messageId' > $response->getMessageId()];\n         } catch (Exception $e) {\n             throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.507ff7fbe8e35eba40b9ccad775a10b7.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\nF\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'messageId' => '1234'\n+    0 => true\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:46\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return [];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n         $sendSmtpEmail = new SendSmtpEmail($emailData);\n         try {\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n-            return ['messageId' => $response->getMessageId()];\n+            return [];\n         } catch (Exception $e) {\n             throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.86e4dd79798fe6461207d7c85cf0203f.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\nF\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailSuccess\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'messageId' => '1234'\n )\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:46\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Infrastructure\\Brevo;\n\nuse EmailSender\\Application\\Service\\SendMail\\EmailApiInterface;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse GuzzleHttp\\Client;\nuse Exception;\nuse GuzzleHttp\\ClientInterface;\nclass BrevoSender implements EmailApiInterface\n{\n    private const API_KEY = 'api-key';\n    private TransactionalEmailsApi $apiInstance;\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function sendEmail(array $emailData): array\n    {\n        var_dump($emailData);\n        $sendSmtpEmail = new SendSmtpEmail($emailData);\n        try {\n            $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            return ['messageId' => $response->getMessageId()];\n        } catch (Exception $e) {\n            new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n             $response = $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n             return ['messageId' => $response->getMessageId()];\n         } catch (Exception $e) {\n-            throw new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n+            new ErrorMailSenderException(\"Erreur lors de l'envoi du mail\", 500, $e);\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.348be7d821f49cd90da09dfcf9a7c8c0.infection.xml\n\narray(5) {\n  [\"subject\"]=>\n  string(16) \"Test Email Infra\"\n  [\"sender\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(11) \"Sender Name\"\n    [\"email\"]=>\n    string(18) \"sender@example.com\"\n  }\n  [\"to\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"morgan chemarin\"\n    [\"email\"]=>\n    string(27) \"morgan.chemarin@logipro.com\"\n  }\n  [\"htmlContent\"]=>\n  string(55) \"<html><body><h1>This is a test email<\/h1><\/body><\/html>\"\n  [\"attachment\"]=>\n  array(0) {\n  }\n}\n.array(0) {\n}\nF                                                                  2 \/ 2 (100%)\n\nTime: 00:00.020, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\Infrastructure\\Brevo\\BrevoSenderTest::testSendEmailFailure\nFailed asserting that exception of type \"TypeError\" matches expected exception \"Exception\". Message was: \"EmailSender\\Infrastructure\\Brevo\\BrevoSender::sendEmail(): Return value must be of type array, none returned\" at\n\/home\/dev\/work\/emailsender\/src\/Infrastructure\/Brevo\/BrevoSender.php:33\n\/home\/dev\/work\/emailsender\/tests\/unit\/Infrastructure\/Brevo\/BrevoSenderTest.php:55\n.\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}