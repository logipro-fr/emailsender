{"stats":{"totalMutantsCount":21,"killedCount":21,"notCoveredCount":0,"escapedCount":0,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":100,"mutationCodeCoverage":100,"coveredCodeMsi":100},"escaped":[],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    protected function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n         $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n         $this->apiInstance = new TransactionalEmailsApi($client, $config);\n     }\n-    public function isAuthenticated(string $user): ResponseIsAuth\n+    protected function isAuthenticated(string $user): ResponseIsAuth\n     {\n         $this->user = $user;\n         return new ResponseIsAuth($this->user);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.62fe29f68a481a6799ee3112ba450361.infection.xml\n\nE.F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::isAuthenticated() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:32\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::isAuthenticated() from scope EmailSender\\Tests\\EmailSenderTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:53\n.\n\nERRORS!\nTests: 3, Assertions: 2, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    protected function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n         $this->user = $user;\n         return new ResponseIsAuth($this->user);\n     }\n-    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n+    protected function sendMail(RequestEmailSender $request): CreateSmtpEmail\n     {\n         if (isset($this->user)) {\n             $sendSmtpEmail = $this->contentSmtpEmail($request);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4ff4cb0261c7876d37e8e2223814bea7.infection.xml\n\nEF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSuccess\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailAuthFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\". Message was: \"Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail() from scope EmailSender\\Tests\\EmailSenderTest\" at\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:44\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n             try {\n                 return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n             } catch (Exception $e) {\n-                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n+                new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n             }\n         }\n         throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6a2a76f2918b6192dabba42b20ac3dbf.infection.xml\n\n..F\n\nTime: 00:00.021, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Utilisateur non authentifi\u00e9\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:43\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nFAILURES!\nTests: 3, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n                 throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n             }\n         }\n-        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n+        new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9971362de4826d456e105baa3c2e4663.infection.xml\n\n.F\n\nTime: 00:00.021, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailAuthFailure\nFailed asserting that exception of type \"TypeError\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException\". Message was: \"EmailSender\\Application\\Service\\SendMail\\EmailSender::sendMail(): Return value must be of type Brevo\\Client\\Model\\CreateSmtpEmail, none returned\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:44\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:44\n.\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    protected function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n     }\n-    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n+    protected function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n         return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.476193e70a44f28d4a246af7b20e6962.infection.xml\n\n.E..                                                                4 \/ 4 (100%)\n\nTime: 00:00.026, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Application\\Service\\SendMail\\EmailSender::contentSmtpEmail() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:71\n\nERRORS!\nTests: 4, Assertions: 4, Errors: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":56},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.71c433c8dc2f7073a3a0a09e57ff723e.infection.xml\n\nF\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'cc' => null\n         'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n         'textContent' => null\n-        'subject' => null\n+        'subject' => 'Test Email'\n         'replyTo' => null\n         'attachment' => []\n         'headers' => null\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' > $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['subject' > $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.99ac911eaf5137bd55d3c6c639358819.infection.xml\n\n..F\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'cc' => null\n         'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n         'textContent' => null\n-        'subject' => null\n+        'subject' => 'Test Email'\n         'replyTo' => null\n         'attachment' => []\n         'headers' => null\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' > $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' > $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.fa7dbbd3bd604acfb42b61cf15ce5095.infection.xml\n\n..F\n\nTime: 00:00.034, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n Brevo\\Client\\Model\\SendSmtpEmail Object (\n     'container' => Array (\n-        'sender' => null\n+        'sender' => [...]\n         'to' => [...]\n         'bcc' => null\n         'cc' => null\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' > $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' > $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ea1c63b430ffe2a5289d88882ffece8a.infection.xml\n\n..F\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n Brevo\\Client\\Model\\SendSmtpEmail Object (\n     'container' => Array (\n         'sender' => [...]\n-        'to' => null\n+        'to' => [...]\n         'bcc' => null\n         'cc' => null\n         'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' > $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' > $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.98ba3ed6015ab26d25320d4b374d6443.infection.xml\n\n..F\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'to' => [...]\n         'bcc' => null\n         'cc' => null\n-        'htmlContent' => null\n+        'htmlContent' => '<html><body><h1>This is a tes...\/html>'\n         'textContent' => null\n         'subject' => 'Test Email'\n         'replyTo' => null\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Application\\Service\\SendMail;\n\nuse Brevo\\Client\\Api\\TransactionalEmailsApi;\nuse Brevo\\Client\\Model\\SendSmtpEmail;\nuse Brevo\\Client\\Configuration;\nuse Brevo\\Client\\Model\\CreateSmtpEmail;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorAuthException;\nuse EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException;\nuse Exception;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\ClientInterface;\nclass EmailSender\n{\n    private TransactionalEmailsApi $apiInstance;\n    private string $user;\n    private const HTTP_ERROR_401 = 401;\n    private const HTTP_ERROR_500 = 500;\n    private const API_KEY = 'api-key';\n    private const ERROR_SENDING = \"Erreur lors de l'envoi du mail\";\n    private const ERROR_AUTH = \"Utilisateur non authentifi\u00e9\";\n    public function __construct(string $apiKey, ClientInterface $client = new Client())\n    {\n        $config = Configuration::getDefaultConfiguration()->setApiKey(self::API_KEY, $apiKey);\n        $this->apiInstance = new TransactionalEmailsApi($client, $config);\n    }\n    public function isAuthenticated(string $user): ResponseIsAuth\n    {\n        $this->user = $user;\n        return new ResponseIsAuth($this->user);\n    }\n    public function sendMail(RequestEmailSender $request): CreateSmtpEmail\n    {\n        if (isset($this->user)) {\n            $sendSmtpEmail = $this->contentSmtpEmail($request);\n            try {\n                return $this->apiInstance->sendTransacEmail($sendSmtpEmail);\n            } catch (Exception $e) {\n                throw new ErrorMailSenderException(self::ERROR_SENDING, self::HTTP_ERROR_500, $e);\n            }\n        }\n        throw new ErrorAuthException(self::ERROR_AUTH, self::HTTP_ERROR_401);\n    }\n    public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n    {\n        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' > $request->mail->getMailAttachment()]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php","originalStartLine":61},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function contentSmtpEmail(RequestEmailSender $request): SendSmtpEmail\n     {\n-        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' => $request->mail->getMailAttachment()]);\n+        return new SendSmtpEmail(['subject' => $request->mail->getMailSubject(), 'sender' => $request->mail->getMailSender(), 'to' => $request->mail->getMailTo(), 'htmlContent' => $request->mail->getMailHtmlContent(), 'attachment' > $request->mail->getMailAttachment()]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9b70644ab20fae9a963526251702f1d0.infection.xml\n\nF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'textContent' => null\n         'subject' => 'Test Email'\n         'replyTo' => null\n-        'attachment' => null\n+        'attachment' => []\n         'headers' => null\n         'templateId' => null\n         'params' => null\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:72\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Attachment\n{\n    \/**\n     * @param array<string, Attachment> $attachment\n     *\/\n    public function __construct(private array $attachment = [])\n    {\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getAttachment(): array\n    {\n        return $this->attachment;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Attachment.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getAttachment(): array\n+    protected function getAttachment(): array\n     {\n         return $this->attachment;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.800ef225b5534f1844adb01842f98640.infection.xml\n\n.EF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:47\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:67\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Attachment::getAttachment() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:47\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:61\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 3, Assertions: 2, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    public function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass HtmlContent\n{\n    public function __construct(private string $htmlContent = \"\")\n    {\n    }\n    protected function getHtmlContent(): string\n    {\n        return $this->htmlContent;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/HtmlContent.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $htmlContent = \"\")\n     {\n     }\n-    public function getHtmlContent(): string\n+    protected function getHtmlContent(): string\n     {\n         return $this->htmlContent;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e243016ef7bdc3a4681a2de1c9e5dc96.infection.xml\n\nEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:39\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:66\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\HtmlContent::getHtmlContent() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:39\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:60\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    protected function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n     {\n     }\n-    public function getMailSubject(): string\n+    protected function getMailSubject(): string\n     {\n         return $this->subject->getSubject();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a82fc6d98bc009f08dac84ca8e35258f.infection.xml\n\nEF\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailSubject() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:63\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getMailSubject() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    protected function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string> $sender\n      *\/\n-    public function getMailSender(): array\n+    protected function getMailSender(): array\n     {\n         return $this->sender->getSender();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.62d9400c2631b439b7b113243de21d72.infection.xml\n\nEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailSender() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:64\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getMailSender() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    protected function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<int, array<string, string>> $to\n      *\/\n-    public function getMailTo(): array\n+    protected function getMailTo(): array\n     {\n         return $this->to->getTo();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bbd180b22d0ef5f07af3bca269dacfb1.infection.xml\n\nEF\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailTo() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:65\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getMailTo() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    protected function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->to->getTo();\n     }\n-    public function getMailHtmlContent(): string\n+    protected function getMailHtmlContent(): string\n     {\n         return $this->htmlContent->getHtmlContent();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f989fa017fc0185c514d6549c3f08d44.infection.xml\n\nEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailHtmlContent() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:66\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getMailHtmlContent() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:60\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    public function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Mail\n{\n    public function __construct(private Subject $subject, private Sender $sender, private To $to, private HtmlContent $htmlContent, private Attachment $attachment)\n    {\n    }\n    public function getMailSubject(): string\n    {\n        return $this->subject->getSubject();\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getMailSender(): array\n    {\n        return $this->sender->getSender();\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getMailTo(): array\n    {\n        return $this->to->getTo();\n    }\n    public function getMailHtmlContent(): string\n    {\n        return $this->htmlContent->getHtmlContent();\n    }\n    \/**\n     * @return array<string, Attachment> $attachment\n     *\/\n    protected function getMailAttachment(): array\n    {\n        return $this->attachment->getAttachment();\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, Attachment> $attachment\n      *\/\n-    public function getMailAttachment(): array\n+    protected function getMailAttachment(): array\n     {\n         return $this->attachment->getAttachment();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.66bb1f3ae519de1681e672c2d6eb4fe0.infection.xml\n\nEF\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Mail::getMailAttachment() from scope EmailSender\\Tests\\EmailSenderTest\n\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:67\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Mail::getMailAttachment() from scope EmailSender\\Application\\Service\\SendMail\\EmailSender\" at\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:61\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse PhpParser\\Node\\Expr\\Cast\\Object_;\nclass Sender\n{\n    \/**\n     * @param array<string, string> $sender\n     *\/\n    public function __construct(private array $sender)\n    {\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    public function getSender(): array\n    {\n        return $this->sender;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nuse PhpParser\\Node\\Expr\\Cast\\Object_;\nclass Sender\n{\n    \/**\n     * @param array<string, string> $sender\n     *\/\n    public function __construct(private array $sender)\n    {\n    }\n    \/**\n     * @return array<string, string> $sender\n     *\/\n    protected function getSender(): array\n    {\n        return $this->sender;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Sender.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<string, string> $sender\n      *\/\n-    public function getSender(): array\n+    protected function getSender(): array\n     {\n         return $this->sender;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.665b65b41477014111d1fbf87a1ee6b2.infection.xml\n\nEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Sender::getSender() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:64\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Sender::getSender() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:26\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:58\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Subject\n{\n    public function __construct(private string $subject = \"\")\n    {\n    }\n    public function getSubject(): string\n    {\n        return $this->subject;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass Subject\n{\n    public function __construct(private string $subject = \"\")\n    {\n    }\n    protected function getSubject(): string\n    {\n        return $this->subject;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/Subject.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $subject = \"\")\n     {\n     }\n-    public function getSubject(): string\n+    protected function getSubject(): string\n     {\n         return $this->subject;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cb7508bf5446a811b4472add2fe8689d.infection.xml\n\nEF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:63\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\Subject::getSubject() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:18\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:57\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass To\n{\n    \/**\n     * @param array<int, array<string, string>> $to\n     *\/\n    public function __construct(private array $to = [])\n    {\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    public function getTo(): array\n    {\n        return $this->to;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace EmailSender\\Domain;\n\nclass To\n{\n    \/**\n     * @param array<int, array<string, string>> $to\n     *\/\n    public function __construct(private array $to = [])\n    {\n    }\n    \/**\n     * @return array<int, array<string, string>> $to\n     *\/\n    protected function getTo(): array\n    {\n        return $this->to;\n    }\n}","originalFilePath":"\/home\/dev\/work\/emailsender\/src\/Domain\/To.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return array<int, array<string, string>> $to\n      *\/\n-    public function getTo(): array\n+    protected function getTo(): array\n     {\n         return $this->to;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.87ad6c68c6b0df6ab7dc2c4464a9f11c.infection.xml\n\nEF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) EmailSender\\Tests\\EmailSenderTest::testContentSmtpMail\nError: Call to protected method EmailSender\\Domain\\To::getTo() from scope EmailSender\\Domain\\Mail\n\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:34\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:65\n\n--\n\nThere was 1 failure:\n\n1) EmailSender\\Tests\\EmailSenderTest::testSendTransactionalEmailSendingFailure\nFailed asserting that exception of type \"Error\" matches expected exception \"EmailSender\\Application\\Service\\SendMail\\Exceptions\\ErrorMailSenderException\". Message was: \"Call to protected method EmailSender\\Domain\\To::getTo() from scope EmailSender\\Domain\\Mail\" at\n\/home\/dev\/work\/emailsender\/src\/Domain\/Mail.php:34\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:59\n\/home\/dev\/work\/emailsender\/src\/Application\/Service\/SendMail\/EmailSender.php:42\n\/home\/dev\/work\/emailsender\/tests\/unit\/Application\/Service\/SendMail\/EmailSenderTest.php:54\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}